// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                       @id @unique @default(autoincrement())
  email            String                    @unique
  password         String
  username         String                    @unique
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  role             userRoleEnum              @default(USER)
  PetPost          PetPost[]
  ServicePost      ServicePost[]
  location         String?
  profileImage     String?                   @default("https://res.cloudinary.com/dszot6j60/image/upload/v1746525802/default-avatar-profile-icon-vector-social-media-user-image-182145777_qn3gkq.webp")
  backgroundImage  String                    @default("https://res.cloudinary.com/dszot6j60/image/upload/v1746526348/images_bhplq5.jpg")
  sentMessages     Message[]                 @relation("SentMessages")
  receivedMessages Message[]                 @relation("ReceivedMessages")
  conversations    ConversationParticipant[]
  Views            Views[]
  LikedPost        LikedPost[]
}

model Conversation {
  id           Int                       @id @default(autoincrement())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             Int @id @default(autoincrement())
  userId         Int
  conversationId Int

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}

model Message {
  id             Int      @id @default(autoincrement())
  content        String
  timestamp      DateTime @default(now())
  senderId       Int
  receiverId     Int
  conversationId Int

  sender       User         @relation("SentMessages", fields: [senderId], references: [id])
  receiver     User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

model PetPost {
  id            Int           @id @default(autoincrement())
  petName       String
  address       String
  about         String
  image         String
  phoneNumber   Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        Int
  age           Int
  breed         String
  size          PetSizeEnum
  gender        PetGenderEnum
  category      PetCategory   @relation(fields: [petCategoryId], references: [id])
  price         Int
  purpose       PetPostEnum
  petCategoryId Int
  video         String
  User          User          @relation(fields: [userId], references: [id])
  active        Boolean       @default(true)
}

model ServicePost {
  id              Int             @id @default(autoincrement())
  address         String
  about           String
  image           String
  phoneNumber     Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  age             Int
  category        PetCategory     @relation(fields: [petCategoryId], references: [id])
  petCategoryId   Int
  serviceCategory ServiceCategory @relation(fields: [serviceId], references: [id])
  serviceId       Int
  cost            Int
  skill           String[]
}

model Hospital {
  id              Int      @id @default(autoincrement())
  name            String
  about           String
  avatarImage     String[]
  email           String
  backgroundImage String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  rating          String   @default("0")
  location        String
  phoneNumber     Int
  workTime        String
  category        String[]
  views           Views[]  @relation("hospitalViews")

  LikedPost LikedPost[] @relation("LikedHospital")
}

model LikedPost {
  owner      User     @relation(fields: [userId], references: [id])
  userId     Int
  hospital   Hospital @relation("LikedHospital", fields: [hospitalId], references: [id])
  hospitalId Int

  @@id([userId, hospitalId])
}

model Views {
  viewer     User     @relation(fields: [userId], references: [id])
  userId     Int
  hospital   Hospital @relation("hospitalViews", fields: [hospitalId], references: [id])
  hospitalId Int

  @@id([userId, hospitalId]) // Composite ID to prevent duplicate views
}

model PetCategory {
  id          Int           @id @default(autoincrement())
  image       String
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  PetPost     PetPost[]
  ServicePost ServicePost[]
}

model ServiceCategory {
  id          Int           @id @default(autoincrement())
  image       String
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ServicePost ServicePost[]
}

enum PetPostEnum {
  SALE
  ADOPT
}

enum PetSizeEnum {
  SMALL
  MIDDLE
  BIG
}

enum PetGenderEnum {
  MALE
  FEMALE
}

enum userRoleEnum {
  ADMIN
  USER
}
