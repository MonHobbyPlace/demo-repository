// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement()) @unique
  email       String        @unique
  password    String
  username    String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  role        userRoleEnum  @default(USER)
  PetPost     PetPost[]
  ServicePost ServicePost[]
  location    String?
  profileImage String?
  backgroundImage String @default("")
}

model PetPost {
  id            Int           @id @default(autoincrement())
  petName       String
  address       String
  about         String
  image         String
  phoneNumber   Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        Int
  age           Int
  breed         String
  size          PetSizeEnum
  gender        PetGenderEnum
  category      PetCategory   @relation(fields: [petCategoryId], references: [id])
  price         Int
  purpose       PetPostEnum
  petCategoryId Int
  video         String
  User          User          @relation(fields: [userId], references: [id])
}

model ServicePost {
  id              Int             @id @default(autoincrement())
  address         String
  about           String
  image           String
  phoneNumber     Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  age             Int
  category        PetCategory     @relation(fields: [petCategoryId], references: [id])
  purpose         PetPostEnum
  petCategoryId   Int
  serviceCategory ServiceCategory @relation(fields: [serviceId], references: [id])
  serviceId       Int
  cost            Int
  skill           String[]
}

model Hospital {
  id              Int      @id @default(autoincrement())
  name            String
  about           String
  avatarImage     String[]
  email           String
  backgroundImage String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  rating          Int
  location        String
  phoneNumber     Int
  workTime        String
  category        String[]
  views           Int      @default(0)
}

model PetCategory {
  id          Int           @id @default(autoincrement())
  image       String
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  PetPost     PetPost[]
  ServicePost ServicePost[]
}

model ServiceCategory {
  id          Int           @id @default(autoincrement())
  image       String        @unique
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ServicePost ServicePost[]
}

enum PetPostEnum {
  SALE
  ADOPT
}

enum PetSizeEnum {
  SMALL
  MIDDLE
  BIG
}

enum PetGenderEnum {
  MALE
  FEMALE
}

enum userRoleEnum {
  ADMIN
  USER
}
